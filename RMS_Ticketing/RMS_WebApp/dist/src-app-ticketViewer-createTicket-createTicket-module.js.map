{"version":3,"sources":["webpack:///./src/app/ticketViewer/createTicket/createTicket.component.css","webpack:///./src/app/ticketViewer/createTicket/createTicket.component.ts","webpack:///./src/app/ticketViewer/createTicket/createTicket.module.ts","webpack:///./src/app/ticketViewer/createTicket/createTicket.routing.ts","webpack:///./src/app/ticketViewer/createTicket/createTicket.template.html","webpack:///./src/app/ticketViewer/createTicket/createTicket.validator.ts"],"names":[],"mappings":"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","file":"src-app-ticketViewer-createTicket-createTicket-module.js","sourcesContent":["module.exports = \".textboxheight {\\r\\n  height: 30px;\\r\\n}\\r\\n\\r\\n.topTable {\\r\\n  border: 1px solid #07002A;\\r\\n}\\r\\n\\r\\n.topTable-table {\\r\\n  width: 100%\\r\\n}\\r\\n\\r\\n.topTable-table-th {\\r\\n  height: 20px;\\r\\n  text-align: center;\\r\\n  background-color: dodgerblue;\\r\\n  color: white\\r\\n}\\r\\n\\r\\n.topTable-table-td {\\r\\n  text-align: center;\\r\\n}\\r\\n\\r\\n.ng-select.ng-invalid.ng-touched .ng-select-container {\\r\\n  border-color: #dc3545;\\r\\n}\\r\\n\\r\\n.ng-select.ng-valid.ng-touched .ng-select-container {\\r\\n  border-color: #2ecc71;\\r\\n  color: #2ecc71;\\r\\n}\\r\\n\\r\\n.ng-select .ng-select-container {\\r\\n  min-height: 29px;\\r\\n}\\r\\n\\r\\n.ng-select.ng-select-single .ng-select-container {\\r\\n  height: 29px;\\r\\n}\\r\\n\\r\\n.ng-select .ng-select-container .ng-value-container {\\r\\n  padding-top: 4px;\\r\\n}\\r\\n\\r\\n.ng-select .ng-clear-wrapper {\\r\\n  padding-top: 4px;\\r\\n}\\r\\n\\r\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvdGlja2V0Vmlld2VyL2NyZWF0ZVRpY2tldC9jcmVhdGVUaWNrZXQuY29tcG9uZW50LmNzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLGFBQWE7Q0FDZDs7QUFFRDtFQUNFLDBCQUEwQjtDQUMzQjs7QUFFRDtFQUNFLFdBQVc7Q0FDWjs7QUFFRDtFQUNFLGFBQWE7RUFDYixtQkFBbUI7RUFDbkIsNkJBQTZCO0VBQzdCLFlBQVk7Q0FDYjs7QUFFRDtFQUNFLG1CQUFtQjtDQUNwQjs7QUFFRDtFQUNFLHNCQUFzQjtDQUN2Qjs7QUFFRDtFQUNFLHNCQUFzQjtFQUN0QixlQUFlO0NBQ2hCOztBQUlEO0VBQ0UsaUJBQWlCO0NBQ2xCOztBQUVEO0VBQ0UsYUFBYTtDQUNkOztBQUVEO0VBQ0UsaUJBQWlCO0NBQ2xCOztBQUVEO0VBQ0UsaUJBQWlCO0NBQ2xCIiwiZmlsZSI6InNyYy9hcHAvdGlja2V0Vmlld2VyL2NyZWF0ZVRpY2tldC9jcmVhdGVUaWNrZXQuY29tcG9uZW50LmNzcyIsInNvdXJjZXNDb250ZW50IjpbIi50ZXh0Ym94aGVpZ2h0IHtcclxuICBoZWlnaHQ6IDMwcHg7XHJcbn1cclxuXHJcbi50b3BUYWJsZSB7XHJcbiAgYm9yZGVyOiAxcHggc29saWQgIzA3MDAyQTtcclxufVxyXG5cclxuLnRvcFRhYmxlLXRhYmxlIHtcclxuICB3aWR0aDogMTAwJVxyXG59XHJcblxyXG4udG9wVGFibGUtdGFibGUtdGgge1xyXG4gIGhlaWdodDogMjBweDtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbiAgYmFja2dyb3VuZC1jb2xvcjogZG9kZ2VyYmx1ZTtcclxuICBjb2xvcjogd2hpdGVcclxufVxyXG5cclxuLnRvcFRhYmxlLXRhYmxlLXRkIHtcclxuICB0ZXh0LWFsaWduOiBjZW50ZXI7XHJcbn1cclxuXHJcbi5uZy1zZWxlY3QubmctaW52YWxpZC5uZy10b3VjaGVkIC5uZy1zZWxlY3QtY29udGFpbmVyIHtcclxuICBib3JkZXItY29sb3I6ICNkYzM1NDU7XHJcbn1cclxuXHJcbi5uZy1zZWxlY3QubmctdmFsaWQubmctdG91Y2hlZCAubmctc2VsZWN0LWNvbnRhaW5lciB7XHJcbiAgYm9yZGVyLWNvbG9yOiAjMmVjYzcxO1xyXG4gIGNvbG9yOiAjMmVjYzcxO1xyXG59XHJcblxyXG5cclxuXHJcbi5uZy1zZWxlY3QgLm5nLXNlbGVjdC1jb250YWluZXIge1xyXG4gIG1pbi1oZWlnaHQ6IDI5cHg7XHJcbn1cclxuXHJcbi5uZy1zZWxlY3Qubmctc2VsZWN0LXNpbmdsZSAubmctc2VsZWN0LWNvbnRhaW5lciB7XHJcbiAgaGVpZ2h0OiAyOXB4O1xyXG59XHJcblxyXG4ubmctc2VsZWN0IC5uZy1zZWxlY3QtY29udGFpbmVyIC5uZy12YWx1ZS1jb250YWluZXIge1xyXG4gIHBhZGRpbmctdG9wOiA0cHg7XHJcbn1cclxuXHJcbi5uZy1zZWxlY3QgLm5nLWNsZWFyLXdyYXBwZXIge1xyXG4gIHBhZGRpbmctdG9wOiA0cHg7XHJcbn1cclxuIl19 */\"","import { FormGroup, FormControl, Validators, FormBuilder } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { Component, OnInit, ViewChild, Input, ViewEncapsulation} from '@angular/core';\r\nimport { TicketViewerServices } from '../ticketViewer.service';\r\nimport { DataService } from 'src/app/services/DataService';\r\nimport { CreateTicketValidator } from './createTicket.validator';\r\nimport { BaseResponseWithData } from '../../shared/model/BaseResponseModel';\r\nimport { CommonFunctionality } from 'src/app/app.commonFunctionality';\r\nimport { DatePipe } from '@angular/common'\r\n\r\n@Component({\r\n  selector: 'app-createTicket',\r\n  templateUrl: './createTicket.template.html',\r\n  styleUrls: ['./createTicket.component.css'],\r\n  encapsulation: ViewEncapsulation.None,\r\n})\r\nexport class CreateTicketComponent implements OnInit {\r\n\r\n  @ViewChild('fromDate') fromDate: any;\r\n  @ViewChild('toDate') toDate: any;\r\n\r\n\r\n  filetype: any = [\"txt\", \"doc\", \"docx\"];\r\n  submitted: boolean = true;  \r\n  showIncidentDate: boolean = false;\r\n  fileContent: any;\r\n  dateValue: Date;\r\n  emailDateValue: Date;\r\n  maxDate: Date;\r\n  incidentMaxDate: Date;\r\n  incidentDateValue: Date;\r\n  fromDateMinDate: Date;\r\n  minDate: Date;\r\n  model: CreateTicket = new CreateTicket();\r\n  queryTypeOptions: any;\r\n  queryCategoryOptions: any;\r\n  isSaveButtonDisable: boolean = false;\r\n  hideCustomerShortagefields: boolean = false;\r\n  hideShortageQueryfield: boolean = true;\r\n  hideAccountNumber: boolean = false;\r\n  hideEmailDate: boolean = false;\r\n  hideDate: boolean = true;\r\n\r\n  createTicketForm: FormGroup;\r\n\r\n \r\n\r\n  get form() { return this.createTicketForm.controls;}\r\n  constructor(public datepipe: DatePipe,private service: TicketViewerServices, private ds: DataService, private router: Router, private formBuilder: FormBuilder, private cf: CommonFunctionality) {\r\n    \r\n    this.model.QueryCategory = null;\r\n    this.model.QueryType = null;\r\n    \r\n    this.cf.GetUserDetails().subscribe((data: BaseResponseWithData<any>) => {\r\n      if (data.Success) {\r\n        this.hideEmailDate = data.Entity.AssignedRoleID == 2 ? true : false;\r\n        this.hideDate = data.Entity.AssignedRoleID == 2 ? false : true;\r\n        \r\n        if (this.hideEmailDate) {\r\n          this.createTicketForm.controls['emailDateValidations'].clearValidators();\r\n          let date = new Date();\r\n          this.model.EmailDate = this.datepipe.transform(date, 'dd-MM-yyyy');\r\n          \r\n        }\r\n      }\r\n    });\r\n\r\n\r\n  }\r\n\r\n  ngOnInit() {\r\n    this.dateValue = new Date();\r\n    this.emailDateValue = new Date();\r\n    this.incidentDateValue = new Date();\r\n    this.maxDate = new Date();\r\n    this.incidentMaxDate = new Date();\r\n    this.service.getQueryType().subscribe((result: any) => {\r\n      \r\n      const index: number = result.Entity.queryType.indexOf(\"physical shortage\".toUpperCase());\r\n      if (index !== -1) {\r\n        result.Entity.queryType.splice(index, 1);\r\n      } \r\n      this.queryTypeOptions = result.Entity.queryType;\r\n      this.queryCategoryOptions = result.Entity.queryCategory;\r\n    });\r\n\r\n    this.createTicketForm = this.formBuilder.group({\r\n      queryType:['', [Validators.required]],\r\n      queryCategory: ['', []],\r\n      emailDateValidations:['', [Validators.required]],\r\n      incidentDateValidation:['', [Validators.required]],\r\n      disputedAmount:['', [Validators.required, Validators.pattern('[0-9]+$'), CreateTicketValidator.cannotBeZero,CreateTicketValidator.multiplesOf10]],\r\n      atmID: ['', [Validators.required]],\r\n      bank: [{ value: '', disabled: true }, [Validators.required]],\r\n      account: [{ value: '', disabled: true }, [Validators.required]],\r\n      location: [{ value: '', disabled: true }, [Validators.required]],\r\n      transactionAmount: ['',[]],\r\n      transactionNo: ['',[]],\r\n      cardNo: ['', []],\r\n      fromDateValidations: ['', []],\r\n      toDateValidations: ['', []],\r\n      referenceNumber: ['', [Validators.pattern('[a-z0-9A-Z]+$')]],\r\n      accountNo: ['', [Validators.pattern('[0-9]+$')]],\r\n      disputeComments: ['', []],\r\n      upload: ['', [Validators.required, CreateTicketValidator.requiredFileType(this.filetype)]],\r\n      dateValidations: [{ value: '', disabled: true },[]],\r\n    },\r\n      {\r\n        validator: CreateTicketValidator.transactionAmountvalidation('transactionAmount', 'disputedAmount'),\r\n      }\r\n    )\r\n\r\n    this.createTicketForm.valueChanges.subscribe((valuesChanged: any) => {\r\n      this.submitted = this.createTicketForm.valid\r\n    })\r\n  }\r\n\r\n  onEmailDatePickerChanged(event:boolean) {\r\n    if (event) {\r\n      this.incidentMaxDate = new Date(this.model.EmailDate);\r\n      this.fromDateMinDate = new Date(this.model.EmailDate);\r\n    } else {\r\n      this.showIncidentDate = true;\r\n    }\r\n  }\r\n\r\n  onAtmIdEntered(event: any) {\r\n    if (event.target.value != null && event.target.value != \"\") {\r\n\r\n      this.ds.ShowHideToasty({\r\n        title: 'Please Wait...',\r\n        msg: '',\r\n        showClose: false,\r\n        theme: 'bootstrap',\r\n        type: 'wait',\r\n        closeOther: true\r\n      });\r\n\r\n      this.model.ATMID = event.target.value;\r\n\r\n      this.service.getMasterData(this.model).subscribe((result: any) => {\r\n        if (result.Success) {\r\n          this.ds.ShowHideToasty({\r\n            title: 'Valid AtmID:('+event.target.value+')..',\r\n            msg: '',\r\n            showClose: true,\r\n            theme: 'bootstrap',\r\n            type: 'success',\r\n            closeOther: true,\r\n            timeout: 5000\r\n          });\r\n\r\n          this.model.Bank = result.Entity.Bank;\r\n          this.model.Account = result.Entity.Account;\r\n          this.model.MSP = result.Entity.Account;\r\n          this.model.Location = result.Entity.Location;\r\n\r\n        } else {\r\n\r\n          this.ds.ShowHideToasty({\r\n            title: 'Failure..',\r\n            msg: 'AtmID:('+ event.target.value+') not Valid, Kindly enter correct ATMID',\r\n            showClose: true,\r\n            theme: 'bootstrap',\r\n            type: 'error',\r\n            closeOther: true,\r\n          });\r\n          this.model.ATMID = null;\r\n          this.model.Account = null;\r\n          this.model.MSP = null;\r\n          this.model.Location = null;\r\n        }\r\n      });\r\n    }\r\n  }\r\n\r\n  selectionChanged($event) {\r\n    if ($event !== undefined) {\r\n      if ($event != \"Customer Claim\".toUpperCase()) {\r\n        this.aCustomerClaim();\r\n      } else {\r\n        this.notACustomerClaim();\r\n      }\r\n      \r\n      if ($event != \"Shortage query\".toLocaleUpperCase()) {\r\n        this.hideAccountNumber = false;\r\n      } else {\r\n        this.hideAccountNumber = true;\r\n      }\r\n\r\n    } else {\r\n        this.notACustomerClaim();\r\n    }\r\n  }\r\n\r\n  notACustomerClaim() {\r\n    this.hideAccountNumber = false;\r\n    this.hideCustomerShortagefields = false;\r\n    this.hideShortageQueryfield = true;\r\n    this.createTicketForm.controls['transactionAmount'].setValidators([Validators.required, Validators.pattern('[0-9]+$'), CreateTicketValidator.cannotBeZero, CreateTicketValidator.multiplesOf10]);\r\n    this.createTicketForm.controls['transactionNo'].setValidators([Validators.required, Validators.pattern('[0-9]+$'), Validators.minLength(4), Validators.maxLength(12)]);\r\n    this.createTicketForm.controls['cardNo'].setValidators([Validators.required, Validators.pattern('[0-9]+[xX]+[0-9]+$'), Validators.minLength(16), Validators.maxLength(19), CreateTicketValidator.CardNo,]);\r\n    this.createTicketForm.controls['queryCategory'].setValidators([Validators.required,]);\r\n    this.createTicketForm.setControl('validator', this.createTicketForm.controls['validator']);\r\n    this.createTicketForm.controls['queryCategory'].enable();\r\n  }\r\n\r\n  aCustomerClaim() {\r\n    this.hideCustomerShortagefields = true;\r\n    this.hideShortageQueryfield = false;\r\n    this.model.QueryCategory = null;\r\n    this.createTicketForm.controls['transactionAmount'].clearValidators();\r\n    this.createTicketForm.controls['transactionNo'].clearValidators();\r\n    this.createTicketForm.controls['cardNo'].clearValidators();\r\n    this.createTicketForm.controls['queryCategory'].clearValidators();\r\n    this.createTicketForm.setControl('validator', null)\r\n    this.createTicketForm.controls['queryCategory'].disable();\r\n  }\r\n\r\n  onToggleFromDatePicker() {\r\n    this.fromDate.toggle();\r\n  }\r\n\r\n  onToggleToDatePicker() {\r\n    this.toDate.toggle();\r\n  }\r\n\r\n  onFromDatePickerChanged(event:Date) {\r\n    this.minDate = event;\r\n  }\r\n\r\n  onFileChange($event) {\r\n    if ($event.target.files.length > 0) {\r\n      this.model.upload = $event.target.files[0];\r\n    }\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.createTicketForm.invalid) {\r\n      return;\r\n    }\r\n    this.callServiceCreateTicket()\r\n  }\r\n\r\n  callServiceCreateTicket() {\r\n    const formData: FormData = new FormData();\r\n    for (var key in this.model) {\r\n      formData.append(key, this.model[key]);\r\n    }\r\n    this.ds.ShowHideToasty({\r\n      title: 'Creating Ticket and Uploading File....Wait!',\r\n      msg: '',\r\n      showClose: false,\r\n      theme: 'bootstrap',\r\n      type: 'wait',\r\n      closeOther: true\r\n    });\r\n    this.model.ModifiedDate = this.model.EmailDate;\r\n    this.service.createTicket(formData).subscribe((response: any) => {\r\n      if (response.Success) {\r\n\r\n        this.ds.ShowHideToasty({\r\n          title: 'Ticket Created and File Uploaded Successfully..',\r\n          msg: '',\r\n          showClose: true,\r\n          theme: 'bootstrap',\r\n          type: 'success',\r\n          closeOther: true,\r\n          timeout: 5000\r\n        });\r\n\r\n        this.router.navigateByUrl('/TicketViewer')\r\n\r\n      } else {\r\n        this.ds.ShowHideToasty({\r\n          title: 'Failed to Create Ticket and Upload file',\r\n          msg: response.Message,\r\n          showClose: true,\r\n          theme: 'bootstrap',\r\n          type: 'error',\r\n          closeOther: true,\r\n        });\r\n      }\r\n    })\r\n  }\r\n\r\n  back() {\r\n    this.router.navigateByUrl('/TicketViewer');\r\n  }\r\n\r\n  Reset() {\r\n    this.hideCustomerShortagefields = false;\r\n    this.hideShortageQueryfield = true;\r\n    for (var key in this.model) {\r\n      this.model[key]=null;\r\n    }\r\n  }\r\n\r\n\r\n  \r\n}\r\n\r\n\r\n\r\n\r\nexport class CreateTicket {\r\n  public BatchID: string = null\r\n  public QueryType: string = null\r\n  public QueryCategory: string = null\r\n  public EmailDate: string = null\r\n  public ModifiedDate: string = null\r\n  public IncidentDate: string =null\r\n  public ATMID: string = null\r\n  public DisputedAmount: number = null\r\n  public Bank: string = null\r\n  public Account: string = null\r\n  public AccountNo: string = null\r\n  public MSP: string = null\r\n  public Location: string = null\r\n  public TransactionAmount: number = null\r\n  public TransactionNo: string = null\r\n  public CardNo: string = null\r\n  public ReferenceNo: string = null\r\n  public DisputeComments: string = null\r\n  public FromDate: string = null\r\n  public ToDate: string =null\r\n  public upload:File = null\r\n}\r\n\r\n","import { NgModule } from '@angular/core';\r\nimport { SelectDropDownModule } from 'ngx-select-dropdown'\r\nimport { CreateTicketComponent } from './createTicket.component';\r\nimport { routing } from './createTicket.routing';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\nimport { CommonModule } from '@angular/common';\r\nimport { TicketViewerServices } from '../ticketViewer.service';\r\nimport { BsDatepickerModule } from 'ngx-bootstrap';\r\nimport { NgSelectModule } from '@ng-select/ng-select';\r\n\r\n@NgModule({\r\n  imports: [routing,\r\n    SharedModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    SelectDropDownModule,\r\n    BsDatepickerModule.forRoot(),\r\n    NgSelectModule,\r\n  ],\r\n  declarations: [CreateTicketComponent],\r\n  providers: [TicketViewerServices]\r\n})\r\nexport class CreateTicketModule { }\r\n","import { ModuleWithProviders } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\nimport { CreateTicketComponent } from './createTicket.component';\r\n\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: CreateTicketComponent,\r\n        data: {\r\n          breadcrumb: 'CreateTicket',\r\n            //icon: 'icofont-dashboard bg-c-blue',\r\n            //status: false\r\n    },\r\n    }\r\n\r\n];\r\n\r\nexport const routing: ModuleWithProviders = RouterModule.forChild(routes);\r\n\r\nexport class CreateTicketRoutingModule { }\r\n","module.exports = \"<app-card [title]=\\\"'Create Ticket'\\\" [blockClass]=\\\"'tran-data'\\\" [showBack]=\\\"true\\\" [showRightSection]=\\\"'false'\\\" (onBack)=\\\"back()\\\" [cardToggle]=\\\"cardToggleGrid\\\">\\r\\n  <form name=\\\"form\\\" [formGroup]=\\\"createTicketForm\\\" novalidate (ngSubmit)=\\\"onSubmit()\\\">\\r\\n\\r\\n    <!--#queryType #queryCategory #emailDate-->\\r\\n    <div class=\\\"row\\\">\\r\\n      <div class=\\\"col-sm-4\\\">\\r\\n        <div class=\\\"form-group row\\\">\\r\\n          <label class=\\\"col-sm-12 col-form-label\\\">Query Type<a style=\\\"color:red\\\">*</a></label>\\r\\n          <div class=\\\"col-sm-12\\\">\\r\\n            <ng-select class=\\\"textboxheight\\\" [items]=\\\"queryTypeOptions\\\"\\r\\n                       formControlName=\\\"queryType\\\"\\r\\n                       id=\\\"queryType\\\"\\r\\n                       [(ngModel)]=\\\"model.QueryType\\\"\\r\\n                       (change)=\\\"selectionChanged($event)\\\">\\r\\n            </ng-select>\\r\\n            <div *ngIf=\\\"form.queryType.invalid && (form.queryType.dirty || form.queryType.touched)\\\" class=\\\"messages text-danger\\\">\\r\\n              <div *ngIf=\\\"form.queryType.errors.required\\\">Query Type is required</div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"col-sm-4\\\">\\r\\n        <div class=\\\"form-group row\\\">\\r\\n          <label class=\\\"col-sm-12 col-form-label\\\">Query Category<a style=\\\"color:red\\\">*</a></label>\\r\\n          <div class=\\\"col-sm-12\\\">\\r\\n            <ng-select class=\\\"textboxheight\\\" [items]=\\\"queryCategoryOptions\\\"\\r\\n                       formControlName=\\\"queryCategory\\\" id=\\\"queryCategory\\\"\\r\\n                       [(ngModel)]=\\\"model.QueryCategory\\\">\\r\\n            </ng-select>\\r\\n            <div *ngIf=\\\"form.queryCategory.invalid && (form.queryCategory.dirty || form.queryCategory.touched)\\\" class=\\\"messages text-danger\\\">\\r\\n              <div *ngIf=\\\"form.queryCategory.errors.required\\\">Query Category is required</div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"col-sm-4\\\" [hidden]=\\\"hideEmailDate\\\">\\r\\n        <div class=\\\"form-group row\\\">\\r\\n          <label class=\\\"col-sm-12 col-form-label\\\">Email Date<a style=\\\"color:red\\\">*</a></label>\\r\\n          <div class=\\\"col-sm-12\\\">\\r\\n            <input class=\\\"form-control textboxheight\\\" placeholder=\\\"Email Date\\\" autocomplete=\\\"off\\\"\\r\\n                   bsDatepicker [(bsValue)]=\\\"emailDateValue\\\"\\r\\n                   [maxDate]=\\\"maxDate\\\"\\r\\n                   [bsConfig]=\\\"{dateInputFormat: 'D/MM/YYYY'}\\\"\\r\\n                   formControlName=\\\"emailDateValidations\\\"\\r\\n                   id=\\\"emailDateValidations\\\"\\r\\n                   [(ngModel)]=\\\"model.EmailDate\\\"\\r\\n                   (ngModelChange)=\\\"onEmailDatePickerChanged(showIncidentDate)\\\"\\r\\n                   [ngClass]=\\\"{ 'form-control-danger': form.emailDateValidations.invalid && (form.emailDateValidations.dirty || form.emailDateValidations.touched), 'form-control-success': form.emailDateValidations.valid && form.emailDateValidations.dirty }\\\" />\\r\\n\\r\\n            <div *ngIf=\\\"form.emailDateValidations.invalid && (form.emailDateValidations.dirty || form.emailDateValidations.touched)\\\" class=\\\"messages text-danger\\\">\\r\\n              <div *ngIf=\\\"form.emailDateValidations.errors.required\\\">Email Date is required</div>\\r\\n            </div>\\r\\n            <a class=\\\"fieldActionIcon datePickerIconRightPos\\\">\\r\\n              <i class=\\\"icofont icofont-ui-calendar\\\"></i>\\r\\n            </a>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"col-sm-4\\\" [hidden]=\\\"hideDate\\\">\\r\\n        <div class=\\\"form-group row\\\">\\r\\n          <label class=\\\"col-sm-12 col-form-label\\\">Date</label>\\r\\n          <div class=\\\"col-sm-12\\\">\\r\\n            <input class=\\\"form-control textboxheight\\\" placeholder=\\\"Date\\\" autocomplete=\\\"off\\\"\\r\\n                   bsDatepicker [(bsValue)]=\\\"dateValue\\\"\\r\\n                   [bsConfig]=\\\"{dateInputFormat: 'D/MM/YYYY'}\\\"\\r\\n                   formControlName=\\\"dateValidations\\\"\\r\\n                   id=\\\"dateValidations\\\"\\r\\n                   [(ngModel)]=\\\"model.EmailDate\\\"\\r\\n                    />\\r\\n            <!--<a class=\\\"fieldActionIcon datePickerIconRightPos\\\">\\r\\n              <i class=\\\"icofont icofont-ui-calendar\\\"></i>\\r\\n            </a>-->\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n    </div>\\r\\n\\r\\n    <!--#incidentDate #disputeAmount #AtmID-->\\r\\n    <div class=\\\"row\\\">\\r\\n\\r\\n      <div class=\\\"col-sm-4\\\">\\r\\n        <div class=\\\"form-group row\\\">\\r\\n          <label class=\\\"col-sm-12 col-form-label \\\">Incident Date<a style=\\\"color:red\\\">*</a></label>\\r\\n          <div class=\\\"col-sm-12\\\">\\r\\n            <input class=\\\"form-control withIcon textboxheight\\\" placeholder=\\\"Incident Date\\\" autocomplete=\\\"off\\\"\\r\\n                   bsDatepicker [(bsValue)]=\\\"incidentDateValue\\\"\\r\\n                   [maxDate]=\\\"incidentMaxDate\\\"\\r\\n                   [bsConfig]=\\\"{dateInputFormat: 'D/MM/YYYY'}\\\"\\r\\n                   id=\\\"incidentDateValidation\\\"\\r\\n                   formControlName=\\\"incidentDateValidation\\\"\\r\\n                   [(ngModel)]=\\\"model.IncidentDate\\\"\\r\\n                   [ngClass]=\\\"{ 'form-control-danger': form.incidentDateValidation.invalid && (form.incidentDateValidation.dirty || form.incidentDateValidation.touched), 'form-control-success':form.incidentDateValidation.valid && form.incidentDateValidation.dirty }\\\" />\\r\\n            <div *ngIf=\\\"form.incidentDateValidation.invalid && (form.incidentDateValidation.dirty || form.incidentDateValidation.touched)\\\" class=\\\"messages text-danger\\\">Incident Date is required</div>\\r\\n            <a class=\\\"fieldActionIcon datePickerIconRightPos\\\">\\r\\n              <i class=\\\"icofont icofont-ui-calendar\\\"></i>\\r\\n            </a>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"col-sm-4\\\">\\r\\n        <div class=\\\"form-group row\\\">\\r\\n          <label class=\\\"col-sm-12 col-form-label\\\">Disputed Amount<a style=\\\"color:red\\\">*</a></label>\\r\\n          <div class=\\\"col-sm-12\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control withIcon textboxheight\\\" placeholder=\\\"Disputed Amount\\\"\\r\\n                   formControlName=\\\"disputedAmount\\\"\\r\\n                   id=\\\"disputedAmount\\\"\\r\\n                   [(ngModel)]=\\\"model.DisputedAmount\\\"\\r\\n                   [ngClass]=\\\"{ 'form-control-danger': form.disputedAmount.invalid && (form.disputedAmount.dirty || form.disputedAmount.touched), 'form-control-success': form.disputedAmount.valid && form.disputedAmount.dirty }\\\" />\\r\\n\\r\\n            <div *ngIf=\\\"form.disputedAmount.invalid && (form.disputedAmount.dirty || form.disputedAmount.touched)\\\" class=\\\"messages text-danger\\\">\\r\\n              <div *ngIf=\\\"form.disputedAmount.errors.required\\\">Disputed Amount is required</div>\\r\\n              <div *ngIf=\\\"form.disputedAmount.errors.pattern\\\">Special Characters Or Characters Not Allowed</div>\\r\\n              <div *ngIf=\\\"form.disputedAmount.errors.cannotBeZero\\\">Dispute Amount Cannot be 0</div>\\r\\n              <div *ngIf=\\\"form.disputedAmount.errors.cannotStartAsZero\\\">Dispute Amount Cannot start from 0</div>\\r\\n              <div *ngIf=\\\"form.disputedAmount.errors.multiplesOf10\\\">Dispute Amount should be Multiples of 10</div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"col-sm-4\\\">\\r\\n        <div class=\\\"form-group row\\\">\\r\\n          <label class=\\\"col-sm-12 col-form-label\\\">ATM ID<a style=\\\"color:red\\\">*</a></label>\\r\\n          <div class=\\\"col-sm-12\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control  textboxheight\\\" placeholder=\\\"ATM ID\\\" (keydown.tab)=\\\"onAtmIdEntered($event)\\\"\\r\\n                   formControlName=\\\"atmID\\\"\\r\\n                   id=\\\"atmID\\\"\\r\\n                   [(ngModel)]=\\\"model.ATMID\\\"\\r\\n                   [ngClass]=\\\"{ 'form-control-danger': form.atmID.invalid && (form.atmID.dirty || form.atmID.touched), 'form-control-success': form.atmID.valid && form.atmID.dirty }\\\" />\\r\\n            <div *ngIf=\\\"form.atmID.invalid && (form.atmID.dirty || form.atmID.touched)\\\" class=\\\"messages text-danger\\\">\\r\\n              <div *ngIf=\\\"form.atmID.errors.required\\\">ATM ID is required</div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n    </div>\\r\\n\\r\\n    <!--#bank #account #location-->\\r\\n    <div class=\\\"row\\\">\\r\\n\\r\\n      <div class=\\\"col-sm-4\\\">\\r\\n        <div class=\\\"form-group row\\\">\\r\\n          <label class=\\\"col-sm-12 col-form-label\\\">Bank</label>\\r\\n          <div class=\\\"col-sm-12\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control withIcon textboxheight\\\" placeholder=\\\"Bank\\\" \\r\\n                   formControlName=\\\"bank\\\"\\r\\n                   id=\\\"bank\\\"\\r\\n                   [(ngModel)]=\\\"model.Bank\\\"\\r\\n                   [ngClass]=\\\"{ 'form-control-danger': form.atmID.invalid && (form.atmID.dirty || form.atmID.touched), 'form-control-success': form.atmID.valid && form.atmID.dirty }\\\" />\\r\\n            <!--<div *ngIf=\\\"form.atmID.invalid && (form.atmID.dirty || form.atmID.touched)\\\" class=\\\"messages text-danger\\\">Bank is required</div>-->\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"col-sm-4\\\">\\r\\n        <div class=\\\"form-group row\\\">\\r\\n          <label class=\\\"col-sm-12 col-form-label\\\">Account</label>\\r\\n          <div class=\\\"col-sm-12\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control withIcon textboxheight\\\" placeholder=\\\"Account\\\"\\r\\n                   formControlName=\\\"account\\\"\\r\\n                   id=\\\"account\\\"\\r\\n                   [(ngModel)]=\\\"model.Account\\\"\\r\\n                   [ngClass]=\\\"{ 'form-control-danger': form.atmID.invalid && (form.atmID.dirty || form.atmID.touched), 'form-control-success': form.atmID.valid && form.atmID.dirty }\\\" />\\r\\n            <!--<div *ngIf=\\\"form.atmID.invalid && (form.atmID.dirty || form.atmID.touched)\\\" class=\\\"messages text-danger\\\">Account is required</div>-->\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"col-sm-4\\\">\\r\\n        <div class=\\\"form-group row\\\">\\r\\n          <label class=\\\"col-sm-12 col-form-label\\\">Location</label>\\r\\n          <div class=\\\"col-sm-12\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control withIcon textboxheight\\\" placeholder=\\\"Location\\\"\\r\\n                   [(ngModel)]=\\\"model.Location\\\"\\r\\n                   formControlName=\\\"location\\\"\\r\\n                   id=\\\"location\\\"\\r\\n                   [ngClass]=\\\"{ 'form-control-danger': form.atmID.invalid && (form.atmID.dirty || form.atmID.touched), 'form-control-success': form.atmID.valid && form.atmID.dirty }\\\" />\\r\\n            <!--<div *ngIf=\\\"form.atmID.invalid && (form.atmID.dirty || form.atmID.touched)\\\" class=\\\"messages text-danger\\\">Location is required</div>-->\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n    </div>\\r\\n\\r\\n    <!--#transactionAmount #transactionNumber #cardNumber-->\\r\\n    <div class=\\\"row\\\" [hidden]=\\\"hideCustomerShortagefields\\\">\\r\\n\\r\\n      <div class=\\\"col-sm-4\\\">\\r\\n        <div class=\\\"form-group row\\\">\\r\\n          <label class=\\\"col-sm-12 col-form-label\\\">Transaction Amount<a style=\\\"color:red\\\">*</a></label>\\r\\n          <div class=\\\"col-sm-12\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control withIcon textboxheight\\\" placeholder=\\\"Transaction Amount\\\"\\r\\n                   formControlName=\\\"transactionAmount\\\"\\r\\n                   id=\\\"transactionAmount\\\"\\r\\n                   [(ngModel)]=\\\"model.TransactionAmount\\\"\\r\\n                   [ngClass]=\\\"{ 'form-control-danger': form.transactionAmount.invalid && (form.transactionAmount.dirty || form.transactionAmount.touched), 'form-control-success': form.transactionAmount.valid && form.transactionAmount.dirty }\\\" />\\r\\n\\r\\n            <div *ngIf=\\\"form.transactionAmount.invalid && (form.transactionAmount.dirty || form.transactionAmount.touched)\\\" class=\\\"messages text-danger\\\">\\r\\n              <div *ngIf=\\\"form.transactionAmount.errors.required\\\">Transaction Amount is required</div>\\r\\n              <div *ngIf=\\\"form.transactionAmount.errors.pattern\\\">Special Characters Or Characters Not Allowed</div>\\r\\n              <div *ngIf=\\\"form.transactionAmount.errors.cannotBeZero\\\">Transaction Amount Cannot be 0</div>\\r\\n              <div *ngIf=\\\"form.transactionAmount.errors.cannotStartAsZero\\\">Transaction Amount Cannot start from 0</div>\\r\\n              <div *ngIf=\\\"form.transactionAmount.errors.transactionAmountValidation\\\">Transaction Amount Cannot be Greater than Disputed Amount</div>\\r\\n              <div *ngIf=\\\"form.transactionAmount.errors.multiplesOf10\\\">Transaction Amount should be Multiples of 10</div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"col-sm-4\\\">\\r\\n        <div class=\\\"form-group row\\\">\\r\\n          <label class=\\\"col-sm-12 col-form-label\\\">Transaction Number<a style=\\\"color:red\\\">*</a></label>\\r\\n          <div class=\\\"col-sm-12\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control withIcon textboxheight\\\" placeholder=\\\"Transaction Number\\\"\\r\\n                   [(ngModel)]=\\\"model.TransactionNo\\\"\\r\\n                   formControlName=\\\"transactionNo\\\"\\r\\n                   id=\\\"transactionNo\\\"\\r\\n                   [ngClass]=\\\"{ 'form-control-danger': form.transactionNo.invalid && (form.transactionNo.dirty || form.transactionNo.touched), 'form-control-success': form.transactionNo.valid && form.transactionNo.dirty }\\\" />\\r\\n            <div *ngIf=\\\"form.transactionNo.invalid && (form.transactionNo.dirty || form.transactionNo.touched)\\\" class=\\\"messages text-danger\\\">\\r\\n              <div *ngIf=\\\"form.transactionNo.errors.required\\\">Transaction Number is required</div>\\r\\n              <div *ngIf=\\\"form.transactionNo.errors.pattern\\\">Special Characters Or Characters Not Allowed</div>\\r\\n              <div *ngIf=\\\"form.transactionNo.errors.minlength\\\" class=\\\"messages text-danger\\\">Minimum 4 Characters Allowed</div>\\r\\n              <div *ngIf=\\\"form.transactionNo.errors.maxlength\\\" class=\\\"messages text-danger\\\">Maximum 12 Characters Allowed</div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"col-sm-4\\\">\\r\\n        <div class=\\\"form-group row\\\">\\r\\n          <label class=\\\"col-sm-12 col-form-label\\\">Card Number<a style=\\\"color:red\\\">*</a></label>\\r\\n          <div class=\\\"col-sm-12\\\">\\r\\n            <input type=\\\"text\\\" class=\\\"form-control withIcon textboxheight\\\" placeholder=\\\"Card Number\\\"\\r\\n                   formControlName=\\\"cardNo\\\"\\r\\n                   id=\\\"cardNo\\\"\\r\\n                   [(ngModel)]=\\\"model.CardNo\\\"\\r\\n                   [ngClass]=\\\"{ 'form-control-danger': form.cardNo.invalid && (form.cardNo.dirty || form.cardNo.touched), 'form-control-success': form.cardNo.valid && form.cardNo.dirty }\\\" />\\r\\n            <div *ngIf=\\\"form.cardNo.invalid &&  (form.cardNo.dirty || form.cardNo.touched)\\\" class=\\\"messages text-danger\\\">\\r\\n              <div *ngIf=\\\"form.cardNo.errors.required\\\">Card Number is required</div>\\r\\n              <div *ngIf=\\\"form.cardNo.errors.minlength\\\" class=\\\"messages text-danger\\\">Minimum 16 Characters Allowed</div>\\r\\n              <div *ngIf=\\\"form.cardNo.errors.maxlength\\\" class=\\\"messages text-danger\\\">Maximum 19 Characters Allowed</div>\\r\\n              <div *ngIf=\\\"form.cardNo.errors.pattern\\\" class=\\\"messages text-danger\\\">Card Number Accepts Numerics and Character X</div>\\r\\n              <div *ngIf=\\\"form.cardNo.errors.CardNo\\\" class=\\\"messages text-danger\\\">Card Number Accepts 16 Or 19 Characters</div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n    </div>\\r\\n\\r\\n    <!--#fromDate #toDate-->\\r\\n    <div class=\\\"row\\\" [hidden]=\\\"hideShortageQueryfield\\\">\\r\\n\\r\\n      <div class=\\\"col-sm-4\\\">\\r\\n        <div class=\\\"form-group row\\\">\\r\\n          <label class=\\\"col-sm-12 col-form-label \\\">From Date</label>\\r\\n          <div class=\\\"col-sm-12\\\">\\r\\n            <input class=\\\"form-control withIcon textboxheight\\\" placeholder=\\\"From Date\\\" autocomplete=\\\"off\\\"\\r\\n                   bsDatepicker [bsValue]=\\\"bsInlineRangeValue\\\"\\r\\n                   [bsConfig]=\\\"{dateInputFormat: 'D/MM/YYYY'}\\\"\\r\\n                   formControlName=\\\"fromDateValidations\\\"\\r\\n                   [minDate]=\\\"fromDateMinDate\\\"\\r\\n                   id=\\\"fromDateValidations\\\"\\r\\n                   [(ngModel)]=\\\"model.FromDate\\\"\\r\\n                   (ngModelChange)=\\\"onFromDatePickerChanged(model.FromDate)\\\"\\r\\n                   [ngClass]=\\\"{'form-control-success': form.fromDateValidations.valid && form.fromDateValidations.dirty}\\\"/>\\r\\n            <a class=\\\"fieldActionIcon datePickerIconRightPos\\\">\\r\\n              <i class=\\\"icofont icofont-ui-calendar\\\"></i>\\r\\n            </a>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n      <div class=\\\"col-sm-4\\\">\\r\\n      <div class=\\\"form-group row\\\" >\\r\\n        <label class=\\\"col-sm-12 col-form-label \\\">To Date</label>\\r\\n        <div class=\\\"col-sm-12\\\">\\r\\n          <input class=\\\"form-control withIcon textboxheight\\\" placeholder=\\\"To Date\\\" autocomplete=\\\"off\\\"\\r\\n                 id=\\\"toDateValidations\\\"\\r\\n                 formControlName=\\\"toDateValidations\\\"\\r\\n                 bsDatepicker [bsValue]=\\\"bsInlineRangeValue\\\"\\r\\n                 [bsConfig]=\\\"{dateInputFormat: 'D/MM/YYYY'}\\\"\\r\\n                 [(ngModel)]=\\\"model.ToDate\\\"\\r\\n                 [minDate]=\\\"minDate\\\"\\r\\n                 [ngClass]=\\\"{'form-control-success': form.toDateValidations.valid && form.toDateValidations.dirty }\\\" />\\r\\n          <a class=\\\"fieldActionIcon datePickerIconRightPos\\\">\\r\\n            <i class=\\\"icofont icofont-ui-calendar\\\"></i>\\r\\n          </a>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    </div>\\r\\n\\r\\n    <!--#referenceNumber #fileUpload #accountNumber #disputeComments-->\\r\\n    <div class=\\\"row\\\">\\r\\n\\r\\n      <div class=\\\"col-sm-4\\\">\\r\\n      <div class=\\\"form-group row\\\">\\r\\n        <label class=\\\"col-sm-12 col-form-label\\\">Reference Number</label>\\r\\n        <div class=\\\"col-sm-12\\\">\\r\\n          <input type=\\\"text\\\" class=\\\"form-control withIcon textboxheight\\\" placeholder=\\\"Reference Number\\\"\\r\\n                 id=\\\"referenceNumber\\\"\\r\\n                 formControlName=\\\"referenceNumber\\\"\\r\\n                 [(ngModel)]=\\\"model.ReferenceNo\\\"\\r\\n                 [ngClass]=\\\"{'form-control-danger': form.referenceNumber.errors,'form-control-success': form.referenceNumber.valid && form.referenceNumber.dirty }\\\" />\\r\\n            <div *ngIf=\\\"form.referenceNumber.invalid && (form.referenceNumber.dirty || form.referenceNumber.touched)\\\" class=\\\"messages text-danger\\\">\\r\\n            <div *ngIf=\\\"form.referenceNumber.errors.pattern\\\" class=\\\"messages text-danger\\\">Reference Number Accepts Numerics and Character</div>\\r\\n          </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      <div class=\\\"form-group row\\\">\\r\\n        <label class=\\\"col-sm-12 col-form-label\\\">Upload File<a style=\\\"color:red\\\">*</a></label>\\r\\n        <div class=\\\"col-sm-12\\\">\\r\\n          <input type=\\\"file\\\" class=\\\"form-control withIcon textboxheight\\\" style=\\\"padding-top: 1px;padding-left: 0px;\\\"\\r\\n                 id=\\\"upload\\\"\\r\\n                 formControlName=\\\"upload\\\"\\r\\n                 [ngModel]=\\\"fileContent\\\"\\r\\n                 (change)=\\\"onFileChange($event)\\\"\\r\\n                 [ngClass]=\\\"{ 'form-control-danger': form.upload.invalid && (form.upload.dirty || form.upload.touched), 'form-control-success': form.upload.valid && form.upload.dirty }\\\" />\\r\\n          <div *ngIf=\\\"form.upload.invalid && (form.upload.dirty || form.upload.touched)\\\" class=\\\"messages text-danger\\\">\\r\\n            <div *ngIf=\\\"form.upload.errors.required\\\">Upload File is required</div>\\r\\n            <div *ngIf=\\\"form.upload.errors.requiredFileType\\\">Only txt,doc,docx files are supported</div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n      <div class=\\\"col-sm-4\\\" [hidden]=\\\"hideAccountNumber\\\">\\r\\n      <div class=\\\"form-group row\\\">\\r\\n        <label class=\\\"col-sm-12 col-form-label\\\">Account Number</label>\\r\\n        <div class=\\\"col-sm-12\\\">\\r\\n          <input type=\\\"text\\\" class=\\\"form-control withIcon textboxheight\\\" placeholder=\\\"Account Number\\\"\\r\\n                 id=\\\"accountNo\\\"\\r\\n                 formControlName=\\\"accountNo\\\"\\r\\n                 [(ngModel)]=\\\"model.AccountNo\\\"\\r\\n                 [ngClass]=\\\"{ 'form-control-danger':form.accountNo.errors ,'form-control-success': form.accountNo.valid && form.accountNo.dirty }\\\" />\\r\\n          <div *ngIf=\\\"form.accountNo.invalid && (form.accountNo.dirty || form.accountNo.touched)\\\" class=\\\"messages text-danger\\\">\\r\\n            <div *ngIf=\\\"form.accountNo.errors.pattern\\\" class=\\\"messages text-danger\\\">Account Number Accepts Numerics Only</div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n      <div class=\\\"col-sm-4\\\">\\r\\n      <div class=\\\"form-group row\\\">\\r\\n        <label class=\\\"col-sm-12 col-form-label\\\">Dispute Comments</label>\\r\\n        <div class=\\\"col-sm-12\\\">\\r\\n          <textarea placeholder=\\\"Dispute Comments\\\" class=\\\"form-control withIcon\\\" style=\\\"max-height:117px;min-height:117px\\\"\\r\\n                    id=\\\"disputeComments\\\"\\r\\n                    formControlName=\\\"disputeComments\\\"\\r\\n                    [(ngModel)]=\\\"model.DisputeComments\\\"\\r\\n                    [ngClass]=\\\"{ 'form-control-success': form.disputeComments.valid && (form.disputeComments.dirty || form.disputeComments.touched) }\\\"></textarea>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n\\r\\n    </div>\\r\\n\\r\\n    <!--#submitButton #resetButton-->\\r\\n    <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-4\\\">\\r\\n    </div>\\r\\n    <div class=\\\"col-sm-4\\\">\\r\\n      <div class=\\\"form-group row\\\">\\r\\n        <div class=\\\"col-sm-12\\\">\\r\\n          <button type=\\\"submit\\\" class=\\\"btn btn-primary float-left\\\" [disabled]=\\\"!submitted\\\">Submit</button>\\r\\n          <button type=\\\"reset\\\" class=\\\"btn btn-primary float-right\\\" (click)=\\\"Reset()\\\">Reset</button>\\r\\n        </div>\\r\\n      </div>\\r\\n\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  </form>\\r\\n</app-card>\\r\\n\"","import { AbstractControl, ValidationErrors, FormGroup } from \"@angular/forms\";\r\n\r\n\r\nexport class CreateTicketValidator {\r\n  \r\n  static cannotBeZero(controller: AbstractControl): ValidationErrors | null {\r\n    if (controller.value != null) {\r\n      \r\n      if ((controller.value as string).indexOf('0') == 0) {\r\n        if (controller.value == 0) {\r\n          return { cannotStartAsZero: true  ,cannotBeZero: true};\r\n        }\r\n        return { cannotStartAsZero: true, cannotBeZero: false };\r\n      }\r\n      \r\n      }\r\n    return null;\r\n  }\r\n\r\n  static multiplesOf10(controller: AbstractControl): ValidationErrors | null {\r\n    if (controller.value != null) {\r\n      if ((controller.value%10) !=  0) {\r\n        return { multiplesOf10: true };\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  static transactionAmountvalidation(transactionAmount:string, disputeAmount:string){\r\n    return (formGroup: FormGroup) => {\r\n      const tranxAmount = formGroup.controls[transactionAmount];\r\n      const dispAmount = formGroup.controls[disputeAmount];\r\n      if (tranxAmount.value != null) {\r\n        \r\n        if ((tranxAmount.value%10) != 0) {\r\n          // return if another validator has already found an error on the matchingControl\r\n          return tranxAmount.setErrors({ multiplesOf10: true });\r\n        }\r\n\r\n        if (Number(tranxAmount.value) > Number(dispAmount.value)) {\r\n          return tranxAmount.setErrors({ transactionAmountValidation: true });\r\n        } else {\r\n          return tranxAmount.setErrors(null);\r\n        } \r\n        }\r\n\r\n      return tranxAmount.setErrors(null);  \r\n      }\r\n\r\n      \r\n\r\n\r\n      \r\n        \r\n  }\r\n\r\n  static CardNo(controller: AbstractControl): ValidationErrors | null {\r\n    if (controller.value != null) {\r\n      if (((controller.value as string).length) == 18 || ((controller.value as string).length) == 17) {\r\n        return { CardNo: true };\r\n      }\r\n    }\r\n    return null;\r\n  }\r\n\r\n  static requiredFileType(type: any) {\r\n    return function (control: FormGroup) {\r\n      const file = control.value;\r\n      if (file) {\r\n        const extension = file.split('.')[1].toLowerCase();\r\n\r\n        if (!(type.indexOf(extension.toLowerCase()) > -1)) {\r\n\r\n            return {\r\n              requiredFileType: true\r\n            };\r\n\r\n        }\r\n\r\n        return null;\r\n      }\r\n\r\n      return null;\r\n    };\r\n  }\r\n}\r\n\r\n\r\n\r\n"],"sourceRoot":""}
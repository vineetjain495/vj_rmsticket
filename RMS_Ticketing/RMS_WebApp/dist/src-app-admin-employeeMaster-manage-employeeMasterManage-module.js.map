{"version":3,"sources":["webpack:///./node_modules/rxjs-compat/_esm5/observable/forkJoin.js","webpack:///./src/app/admin/admin.service.ts","webpack:///./src/app/admin/employeeMaster/manage/duplicateRegionValidation.ts","webpack:///./src/app/admin/employeeMaster/manage/employeeMasterManage.component.css","webpack:///./src/app/admin/employeeMaster/manage/employeeMasterManage.component.ts","webpack:///./src/app/admin/employeeMaster/manage/employeeMasterManage.module.ts","webpack:///./src/app/admin/employeeMaster/manage/employeeMasterManage.routing.ts","webpack:///./src/app/admin/employeeMaster/manage/employeeMasterManage.service.ts","webpack:///./src/app/admin/employeeMaster/manage/employeeMasterManage.template.html","webpack:///./src/app/shared/directives/UniqueCodeValidator.directive.ts","webpack:///./src/app/shared/directives/numberOnly.directive.ts"],"names":[],"mappings":"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","file":"src-app-admin-employeeMaster-manage-employeeMasterManage-module.js","sourcesContent":["export { forkJoin } from 'rxjs';\n//# sourceMappingURL=forkJoin.js.map","import { baseUrl } from '../GlobalShareCode';\r\nimport { Injectable } from '@angular/core';\r\nimport { CommonFunctionality } from '../app.commonFunctionality';\r\n\r\n@Injectable()\r\nexport class AdminService {\r\n\r\n    private getAllRoleMasterUrl: string;\r\n\r\n    constructor(private commonFunc: CommonFunctionality) {\r\n        \r\n        this.getAllRoleMasterUrl = baseUrl + '/Admin/RoleMaster/GetAllRoleMaster';\r\n    }\r\n\r\n    public GetAllRoleMaster<T>() {\r\n        return this.commonFunc.CallHttp<T>(this.getAllRoleMasterUrl, null, null);\r\n    }\r\n\r\n}\r\n\r\n","﻿import {\r\n    ReactiveFormsModule,\r\n    NG_VALIDATORS,\r\n    FormsModule,\r\n    FormGroup,\r\n    FormControl,\r\n    ValidatorFn,\r\n    Validator\r\n} from '@angular/forms';\r\nimport { Directive, Input, forwardRef } from '@angular/core';\r\nimport * as _ from 'lodash';\r\n@Directive({\r\n    selector: '[duplicateRegionValidator][ngModel]',\r\n    providers: [\r\n        {\r\n            provide: NG_VALIDATORS,\r\n            useExisting: forwardRef(() => DuplicateRegionValidator),\r\n            multi: true\r\n        }\r\n    ]\r\n})\r\nexport class DuplicateRegionValidator implements Validator {\r\n    @Input('duplicateRegionValidator') model: any;\r\n    validator: ValidatorFn;\r\n    constructor() {\r\n        this.validator = this.duplicateRegionValidator();\r\n    }\r\n    validate(c: FormControl) {\r\n        return this.validator(c);\r\n    }\r\n\r\n    duplicateRegionValidator(): ValidatorFn {\r\n        return (c: FormControl) => {\r\n            let isValid = false;\r\n            if (c.value) {\r\n                var data = _.filter(this.model, { 'AreaOfficeCode': c.value });\r\n                if (data.length > 1) {\r\n                    isValid = false;\r\n                }\r\n                else {\r\n                    isValid = true;\r\n                }\r\n            }\r\n\r\n            if (isValid) {\r\n                return null;\r\n            } else {\r\n                return {\r\n                    duplicateRegionValidator: {\r\n                        valid: false\r\n                    }\r\n                };\r\n            }\r\n        }\r\n    }\r\n}","module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL2FkbWluL2VtcGxveWVlTWFzdGVyL21hbmFnZS9lbXBsb3llZU1hc3Rlck1hbmFnZS5jb21wb25lbnQuY3NzIn0= */\"","import { HttpClient } from '@angular/common/http';\r\nimport { Component, OnInit, ViewChild } from '@angular/core';\r\nimport { FormGroup } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from \"@angular/router\";\r\nimport * as _ from 'lodash';\r\nimport { SessionStorageService } from 'ngx-webstorage';\r\nimport { forkJoin } from \"rxjs/observable/forkJoin\";\r\nimport { CommonFunctionality } from '../../../app.commonFunctionality';\r\nimport { DataService } from '../../../services/DataService';\r\nimport { BaseResponseWithData } from '../../../shared/model/BaseResponseModel';\r\nimport { AdminService } from '../../admin.service';\r\nimport { EmployeeMasterManageService } from './employeeMasterManage.service';\r\nimport { pipe } from 'rxjs';\r\nimport { map } from 'rxjs/operators';\r\n\r\n@Component({\r\n  selector: 'app-admin-emp-master-manage',\r\n  templateUrl: './employeeMasterManage.template.html',\r\n  styleUrls: ['./employeeMasterManage.component.css'],\r\n  providers: [EmployeeMasterManageService]\r\n})\r\nexport class EmployeeMasterManageComponent implements OnInit {\r\n\r\n  private model: AssignRoleRegion;\r\n\r\n  private dropDownRegionData: Array<AreaOffice> = [];\r\n\r\n  private dropDownLocationData: any = [{\r\n    Locations: [\r\n      //    {\r\n      //    LocationCode: 'L001',\r\n      //    LocationName: 'Noida'\r\n      //},\r\n      //{\r\n      //    LocationCode: 'L002',\r\n      //    LocationName: 'Lajpat Nagar'\r\n      //},\r\n      //{\r\n      //    LocationCode: 'L003',\r\n      //    LocationName: 'Bandra'\r\n      //},\r\n      //{\r\n      //    LocationCode: 'L004',\r\n      //    LocationName: 'Andheri'\r\n      //},\r\n      //{\r\n      //    LocationCode: 'L005',\r\n      //    LocationName: 'Noida 2'\r\n      //},\r\n      //{\r\n      //    LocationCode: 'L006',\r\n      //    LocationName: 'Lajpat Nagar 2'\r\n      //},\r\n      //{\r\n      //    LocationCode: 'L007',\r\n      //    LocationName: 'Bandra 2'\r\n      //},\r\n      //{\r\n      //    LocationCode: 'L008',\r\n      //    LocationName: 'Andheri 2'\r\n      //    }\r\n    ]\r\n  }\r\n  ];\r\n\r\n  private rolemasterData: Array<any>;\r\n  private lCompanys: any[];\r\n  private showCompany: boolean = false;\r\n  private loginUserDetails: any;\r\n\r\n  private dropDownSettings: any;\r\n\r\n  private areaOfficeDropdown: any = {\r\n    AreaOfficeCode: '',\r\n    AreaOfficeName: '',\r\n    Locations: []\r\n  };\r\n  @ViewChild('f') form: FormGroup;\r\n\r\n  constructor(private _http: HttpClient, private route: ActivatedRoute, private router: Router, private _commonFunctionality: CommonFunctionality,\r\n    private ds: DataService, private _adminService: AdminService, private _service: EmployeeMasterManageService, private _session: SessionStorageService) {\r\n\r\n    this.dropDownSettings = {\r\n      singleSelection: false,\r\n      text: \"Select Locations\",\r\n      selectAllText: 'Select All',\r\n      unSelectAllText: 'UnSelect All',\r\n      enableSearchFilter: true,\r\n      labelKey: 'LocationName',\r\n      primaryKey: 'LocationCode',\r\n      maxHeight: 200\r\n    };\r\n    this.model = {\r\n      EmpCode: '',\r\n      AssignedRoleID: 0,\r\n      EmpFullName: '',\r\n      MappedRegionLocation: [{\r\n        AreaOfficeCode: '',\r\n        AreaOfficeName: '',\r\n        Locations: []\r\n      }],\r\n      CompanyID: 0,\r\n      Email: '',\r\n      MobileNumber: null\r\n    } as AssignRoleRegion;\r\n  }\r\n\r\n\r\n\r\n\r\n  ngOnInit(): void {\r\n    var paramMode = this.route.snapshot.params[\"mode\"];\r\n    var paramEmpCode = this.route.snapshot.params[\"empCode\"];\r\n\r\n    this.loginUserDetails = JSON.parse(this._session.retrieve('userdetails'));\r\n    if (this.loginUserDetails) {\r\n      this.showCompany = this.loginUserDetails.CompanyID == 1;\r\n\r\n    }\r\n\r\n    forkJoin([\r\n      this._commonFunctionality.getCompany(),\r\n      this._adminService.GetAllRoleMaster().pipe(map((data: BaseResponseWithData<any>) => {\r\n        if (data.Success) {\r\n          return data.Entity.map((item: any) => {\r\n            return {\r\n              RoleID: item.RoleID,\r\n              RoleName: item.RoleName\r\n            }\r\n          });\r\n        }\r\n        else {\r\n          return null;\r\n        }\r\n      })),\r\n      this._service.GetAreaWithLocation()\r\n    ]).subscribe((results: any) => {\r\n      \r\n      this.rolemasterData = results[1];\r\n      if (results[0].Success) {\r\n        if (results[0].Entity != null) {\r\n          this.lCompanys = results[0].Entity;\r\n\r\n        }\r\n      }\r\n      var data = results[2];\r\n      if (data.Success) {\r\n        this.dropDownRegionData = data.Entity;\r\n\r\n        if (paramMode.toLowerCase() === \"add\") {\r\n          this.dropDownLocationData.push(_.cloneDeep({ 'Locations': [] }));\r\n          this.model.CompanyID = this.loginUserDetails.CompanyID;\r\n          this.ds.ShowHideToasty();\r\n        }\r\n        else if (paramMode.toLowerCase() === \"edit\") {\r\n          var employee = { ID: paramEmpCode };\r\n          this._commonFunctionality.GetAssignedRoleRegion(employee).subscribe((data2: BaseResponseWithData<any>) => {\r\n            if (data2.Success) {\r\n              this.dropDownLocationData = [];\r\n              _.forEach(data2.Entity.MappedRegionLocation, (item) => {\r\n                var regLoc = _.find(this.dropDownRegionData, { 'AreaOfficeCode': item.AreaOfficeCode });\r\n                this.dropDownLocationData.push(_.cloneDeep(\r\n                  {\r\n                    Locations: _.cloneDeep(regLoc.Locations)\r\n                  }\r\n                ));\r\n              });\r\n\r\n              this.model = data2.Entity;\r\n\r\n              this.ds.ShowHideToasty();\r\n            }\r\n            else {\r\n              this.ds.ShowHideToasty({\r\n                title: 'Data Loading Error',\r\n                msg: data.Message,\r\n                showClose: true,\r\n                theme: 'bootstrap',\r\n                type: 'error',\r\n                closeOther: true,\r\n              });\r\n            }\r\n          });\r\n        }\r\n      }\r\n      else {\r\n        this.ds.ShowHideToasty({\r\n          title: 'Data Loading Error',\r\n          msg: data.Message,\r\n          showClose: true,\r\n          theme: 'bootstrap',\r\n          type: 'error',\r\n          closeOther: true,\r\n        });\r\n      }\r\n    });\r\n\r\n\r\n\r\n\r\n\r\n  }\r\n\r\n  addItem() {\r\n    this.dropDownLocationData.push(_.cloneDeep({ 'Locations': [] }));\r\n    this.model.MappedRegionLocation.push(_.cloneDeep(this.areaOfficeDropdown));\r\n\r\n  }\r\n\r\n  removeItem(item, idx) {\r\n    _(this.model.MappedRegionLocation)\r\n      .splice(idx, 1)\r\n      .value();\r\n    _(this.dropDownLocationData)\r\n      .splice(idx, 1)\r\n      .value();\r\n  }\r\n\r\n  onItemSelect(item: any, i: any) {\r\n    console.log(item);\r\n    console.log(this.model)\r\n  }\r\n\r\n  GetLocationData(selectedRegion) {\r\n    var data = _.find(this.dropDownRegionData, { 'AreaOfficeCode': selectedRegion.AreaOfficeCode });\r\n    var response = [];\r\n    if (data) {\r\n      response = data.Locations\r\n    }\r\n    return response;\r\n  }\r\n\r\n  regionChange($event, i) {\r\n    var data = _.find(this.dropDownRegionData, { 'AreaOfficeCode': this.model.MappedRegionLocation[i].AreaOfficeCode });\r\n    this.model.MappedRegionLocation[i].AreaOfficeName = data.AreaOfficeName;\r\n    this.dropDownLocationData[i] = {\r\n      Locations: _.assign([], data.Locations)\r\n    };\r\n  }\r\n\r\n  onSubmit() {\r\n    if (this.form.valid) {\r\n      this.ds.ShowHideToasty({\r\n        title: 'Mapping Employee in process....Wait!',\r\n        msg: '',\r\n        showClose: false,\r\n        theme: 'bootstrap',\r\n        type: 'wait',\r\n        closeOther: true\r\n      });\r\n      this._service.AddUpdateEmployeeRoleAreaMapping(this.model).subscribe((response: BaseResponseWithData<any>) => {\r\n\r\n        if (response.Success) {\r\n\r\n          this.ds.ShowHideToasty({\r\n            title: 'Employee updated & Mapping done Successfully..',\r\n            msg: '',\r\n            showClose: true,\r\n            theme: 'bootstrap',\r\n            type: 'success',\r\n            closeOther: true,\r\n            timeout: 5000\r\n          });\r\n          this.router.navigateByUrl('/Admin/EmployeeMaster/Index');\r\n          //this.router.navigate(['View']); \r\n          //this.form.disable();\r\n        }\r\n        else {\r\n          this.ds.ShowHideToasty({\r\n            title: 'Failure while updating..Check the error or contact administrator',\r\n            msg: response.Message,\r\n            showClose: true,\r\n            theme: 'bootstrap',\r\n            type: 'error',\r\n            closeOther: true,\r\n          });\r\n        }\r\n\r\n      });\r\n    }\r\n  }\r\n\r\n  resetForm() {\r\n    this.form.reset();\r\n  }\r\n}\r\n\r\nexport class AssignRoleRegion {\r\n  public EmpCode: string;\r\n  public EmpFullName: string;\r\n  public MappedRegionLocation: Array<AreaOffice>;\r\n  public AssignedRoleID: number;\r\n  public CompanyID: number;\r\n  public Email: string;\r\n  public MobileNumber: number;\r\n  public Active: boolean;\r\n}\r\n\r\nexport class AreaOffice {\r\n  public AreaOfficeName: string;\r\n  public AreaOfficeCode: string;\r\n  public Locations: Array<Location>;\r\n}\r\n\r\nexport class Location {\r\n  public LocationName: string;\r\n  public LocationCode: string;\r\n}\r\n\r\n","﻿import { NgModule, CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA } from '@angular/core';\nimport { CommonModule } from '@angular/common';\n//import { Ng2SmartTableModule } from 'ng2-smart-table';\nimport { EmployeeMasterManageComponent } from './employeeMasterManage.component';\nimport { routing } from './employeeMasterManage.routing';\nimport { SharedModule } from '../../../shared/shared.module';\nimport { DatePipe } from '@angular/common';\nimport { DuplicateRegionValidator } from './duplicateRegionValidation';\r\nimport { NumberOnlyDirective } from '../../../shared/directives/numberOnly.directive';\r\nimport { UniqueCodeValidatorDirective } from '../../../shared/directives/UniqueCodeValidator.directive';\r\n\r\n//import { DuplicateRegionValidator } from './duplicateRegionValidation';\r\n\n@NgModule({\n    providers: [DatePipe],\n    schemas: [CUSTOM_ELEMENTS_SCHEMA, NO_ERRORS_SCHEMA],\n    imports: [\n        routing,\n        //Ng2SmartTableModule,\n        SharedModule,\n        CommonModule\n    ],\n    declarations: [EmployeeMasterManageComponent, DuplicateRegionValidator, NumberOnlyDirective, UniqueCodeValidatorDirective],\n    \n    \n})\nexport class EmployeeMasterManageModule {\n\n\n\n}\n","import { ModuleWithProviders } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { EmployeeMasterManageComponent } from './employeeMasterManage.component';\r\nimport { AuthGuard } from '../../../shared/Security/auth.guard';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: EmployeeMasterManageComponent,\r\n        data: {\r\n            breadcrumb: 'Manage',\r\n            status: false\r\n    },\r\n    canActivate: [AuthGuard]\r\n    }\r\n];\r\n\r\nexport const routing: ModuleWithProviders = RouterModule.forChild(routes);\r\n","import { baseUrl } from '../../../GlobalShareCode';\r\nimport { Injectable } from '@angular/core';\r\nimport { CommonFunctionality } from '../../../app.commonFunctionality';\r\nimport { AssignRoleRegion } from './employeeMasterManage.component';\r\n\r\n\r\n\r\n@Injectable()\r\nexport class EmployeeMasterManageService {\r\n    \r\n    private addUpdateEmployeeRoleAreaMappingUrl: string;\r\n    private getAreaWithLocationUrl: string;\r\n    private CheckEmployeeExist: string\r\n\r\n    constructor(private commonFunc: CommonFunctionality) {\r\n\r\n        this.addUpdateEmployeeRoleAreaMappingUrl = baseUrl + '/Admin/EmployeeMaster/AddUpdateEmployeeRoleAreaMapping';\r\n        this.getAreaWithLocationUrl = baseUrl + '/Admin/EmployeeMaster/GetAreaWithLocation';\r\n        this.CheckEmployeeExist = baseUrl + '/Admin/EmployeeMaster/CheckEmployeeExist';\r\n    }\r\n\r\n    public GetAreaWithLocation<T>() {\r\n        return this.commonFunc.CallHttp<T>(this.getAreaWithLocationUrl, null, null);\r\n    }\r\n\r\n    public AddUpdateEmployeeRoleAreaMapping<T>(item: AssignRoleRegion) {\r\n        return this.commonFunc.CallHttp<T>(this.addUpdateEmployeeRoleAreaMappingUrl, item, null);\r\n    }\r\n    public CheckEmployeeCodeExist<T>(item: any) {\r\n        return this.commonFunc.CallHttp<T>(this.CheckEmployeeExist, item, null);\r\n    }\r\n\r\n}\r\n\r\n","module.exports = \"\\r\\n<div class=\\\"row\\\">\\r\\n  <div class=\\\"col-sm-12\\\">\\r\\n    <app-card [title]=\\\"'Employee Master'\\\" [showRightSection]=\\\"false\\\">\\r\\n      <form novalidate #f=\\\"ngForm\\\" (ngSubmit)=\\\"onSubmit()\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n          <div [ngClass]=\\\"{'col-sm-3':showCompany,'col-sm-4':!showCompany}\\\">\\r\\n            <div class=\\\"form-group row\\\"\\r\\n                 [ngClass]=\\\"{ 'has-danger': empCode.invalid && empCode.dirty, 'has-success': empCode.valid && empCode.dirty }\\\">\\r\\n\\r\\n              <label class=\\\"col-sm-12 col-form-label\\\">Emp. Code*</label>\\r\\n              <div class=\\\"col-sm-12\\\">\\r\\n                <input type=\\\"text\\\" class=\\\"form-control withIcon\\\" placeholder=\\\"Emp. Code\\\"\\r\\n                       name=\\\"empCode\\\"\\r\\n                       [(ngModel)]=\\\"model.EmpCode\\\"\\r\\n                       required\\r\\n                       [empCodeExists]=\\\"model.CompanyID\\\"\\r\\n                       #empCode=\\\"ngModel\\\"\\r\\n                       [ngClass]=\\\"{ 'form-control-danger': empCode.invalid && empCode.dirty, 'form-control-success': empCode.valid && empCode.dirty }\\\" />\\r\\n                <div *ngIf=\\\"empCode.errors?.empCodeExists\\\" class=\\\"messages text-danger\\\">EmployeeCode exists already</div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div [ngClass]=\\\"{'col-sm-3':showCompany,'col-sm-4':!showCompany}\\\">\\r\\n            <div class=\\\"form-group row\\\"\\r\\n                 [ngClass]=\\\"{ 'has-danger': empFullName.invalid && empFullName.dirty, 'has-success': empFullName.valid && empFullName.dirty }\\\">\\r\\n              <label class=\\\"col-sm-12 col-form-label\\\">Emp. Full Name*</label>\\r\\n              <div class=\\\"col-sm-12\\\">\\r\\n                <input type=\\\"text\\\" class=\\\"form-control withIcon\\\" placeholder=\\\"Emp. Full Name\\\"\\r\\n                       name=\\\"empFullName\\\"\\r\\n                       [(ngModel)]=\\\"model.EmpFullName\\\"\\r\\n                       required\\r\\n                       #empFullName=\\\"ngModel\\\"\\r\\n                       [ngClass]=\\\"{ 'form-control-danger': empFullName.invalid && empFullName.dirty, 'form-control-success': empFullName.valid && empFullName.dirty }\\\" />\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div [ngClass]=\\\"{'col-sm-3':showCompany,'col-sm-4':!showCompany}\\\">\\r\\n            <div class=\\\"form-group row\\\">\\r\\n              <label class=\\\"col-sm-12 col-form-label\\\">Role</label>\\r\\n              <div class=\\\"col-sm-12\\\">\\r\\n                <select class=\\\"form-control\\\"\\r\\n                        name=\\\"tokenKey\\\"\\r\\n                        required\\r\\n                        [(ngModel)]=\\\"model.AssignedRoleID\\\"\\r\\n                        #role=\\\"ngModel\\\"\\r\\n                        [ngClass]=\\\"{ 'form-control-danger': role.invalid && role.dirty, 'form-control-success': role.valid && role.dirty }\\\">\\r\\n                  <option value=\\\"0\\\">Select</option>\\r\\n                  <option *ngFor=\\\"let key of rolemasterData\\\" value=\\\"{{key.RoleID}}\\\">{{key.RoleName}}</option>\\r\\n                </select>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n          <div class=\\\"col-sm-3\\\" *ngIf=\\\"showCompany\\\">\\r\\n            <div class=\\\"form-group row\\\">\\r\\n              <label class=\\\"col-sm-12 col-form-label\\\">Company</label>\\r\\n              <div class=\\\"col-sm-12\\\">\\r\\n                <select class=\\\"form-control\\\"\\r\\n                        [(ngModel)]=\\\"model.CompanyID\\\"\\r\\n                        name=\\\"companyID\\\"\\r\\n                        #companyID=\\\"ngModel\\\">\\r\\n                  <option value=\\\"0\\\">Select</option>\\r\\n                  <option *ngFor=\\\"let company of lCompanys\\\" [value]=\\\"company.CompanyID\\\">\\r\\n                    {{company.CompanyName}}\\r\\n                  </option>\\r\\n                </select>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n          <div class=\\\"col-sm-4\\\">\\r\\n            <div class=\\\"form-group row\\\"\\r\\n                 [ngClass]=\\\"{ 'has-danger': email.invalid && email.dirty, 'has-success': email.valid && email.dirty }\\\">\\r\\n              <label class=\\\"col-sm-12 col-form-label\\\">Emp. Email*</label>\\r\\n              <div class=\\\"col-sm-12\\\">\\r\\n                <input type=\\\"text\\\" class=\\\"form-control withIcon\\\" placeholder=\\\"Emp. Email\\\"\\r\\n                       name=\\\"email\\\"\\r\\n                       [(ngModel)]=\\\"model.Email\\\"\\r\\n                       #email=\\\"ngModel\\\"\\r\\n                       pattern=\\\"^\\\\w+([\\\\.-]?\\\\w+)*@\\\\w+([\\\\.-]?\\\\w+)*(\\\\.\\\\w{2,3})+$\\\"\\r\\n                       [ngClass]=\\\"{ 'form-control-danger': email.invalid && email.dirty, 'form-control-success': email.valid && email.dirty }\\\" />\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"col-sm-4\\\">\\r\\n            <div class=\\\"form-group row\\\">\\r\\n              <label class=\\\"col-sm-12 col-form-label\\\">Emp. Mobile No.</label>\\r\\n              <div class=\\\"col-sm-12\\\">\\r\\n                <input type=\\\"text\\\" class=\\\"form-control withIcon\\\" placeholder=\\\"Emp. Mobile no.\\\"\\r\\n                       name=\\\"mobileNumber\\\"\\r\\n                       [(ngModel)]=\\\"model.MobileNumber\\\"\\r\\n                       #mobileNumber=\\\"ngModel\\\"\\r\\n                       myNumberOnly />\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n          <div class=\\\"col-sm-4\\\">\\r\\n            <div class=\\\"form-group row\\\">\\r\\n              <label class=\\\"col-sm-12 col-form-label\\\">Active.</label>\\r\\n              <div class=\\\"col-sm-12\\\">\\r\\n                <input type=\\\"checkbox\\\" class=\\\"form-control withIcon\\\"\\r\\n                       name=\\\"active\\\"\\r\\n                       [(ngModel)]=\\\"model.Active\\\"\\r\\n                       #active=\\\"ngModel\\\" />\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n\\r\\n        <div class=\\\"row\\\">\\r\\n          <div class=\\\"col-sm-12\\\">\\r\\n            <div class=\\\"form-group row\\\">\\r\\n              <div class=\\\"col-sm-12\\\">\\r\\n                <table class=\\\"table table-bordered\\\">\\r\\n                  <thead>\\r\\n                    <tr>\\r\\n                      <td colspan=\\\"3\\\">\\r\\n                        <a href=\\\"javascript:void(0);\\\" (click)=\\\"addItem();\\\">Add</a>\\r\\n                        <a href=\\\"javascript:void(0);\\\">Reset</a>\\r\\n                      </td>\\r\\n                    </tr>\\r\\n                    <tr>\\r\\n                      <td style=\\\"width:30%; min-width:100px;\\\">AreaOffice</td>\\r\\n                      <td style=\\\"width:70%\\\">Location</td>\\r\\n                      <td>&nbsp;</td>\\r\\n                    </tr>\\r\\n                  </thead>\\r\\n                  <tbody>\\r\\n                    <tr *ngFor=\\\"let area of model.MappedRegionLocation; let i = index\\\">\\r\\n                      <td>\\r\\n                        <select class=\\\"form-control\\\"\\r\\n                                (change)=\\\"regionChange($event, i);\\\"\\r\\n                                name=\\\"area{{i}}\\\"\\r\\n                                #area{{i}}=\\\"ngModel\\\"\\r\\n                                [(ngModel)]=\\\"model.MappedRegionLocation[i].AreaOfficeCode\\\"\\r\\n                                [duplicateRegionValidator]=\\\"model.MappedRegionLocation\\\">\\r\\n                          <option value=\\\"\\\">Select</option>\\r\\n                          <option *ngFor=\\\"let area1 of dropDownRegionData\\\"\\r\\n                                  [ngValue]=\\\"area1.AreaOfficeCode\\\">\\r\\n                            {{area1.AreaOfficeName}}\\r\\n                          </option>\\r\\n                        </select>\\r\\n                      </td>\\r\\n                      <td>\\r\\n                        <angular2-multiselect [data]=\\\"dropDownLocationData[i].Locations\\\"\\r\\n                                              [(ngModel)]=\\\"model.MappedRegionLocation[i].Locations\\\"\\r\\n                                              [settings]=\\\"dropDownSettings\\\"\\r\\n                                              (onSelect)=\\\"onItemSelect($event, i)\\\"\\r\\n                                              name=\\\"location{{i}}\\\" #location{{i}}=\\\"ngModel\\\">\\r\\n                        </angular2-multiselect>\\r\\n                      </td>\\r\\n                      <td><a href=\\\"javascript:void(0);\\\" (click)=\\\"removeItem(area, i)\\\">Remove</a></td>\\r\\n                    </tr>\\r\\n                  </tbody>\\r\\n                </table>\\r\\n                <div class=\\\"clear\\\" style=\\\"height:150px;\\\"></div>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n          <div class=\\\"col-sm-12\\\">\\r\\n            <div class=\\\"form-group row\\\">\\r\\n\\r\\n              <div class=\\\"col-sm-12 button-page\\\">\\r\\n\\r\\n                <button class=\\\"btn btn-inverse float-right\\\" (click)=\\\"resetForm()\\\">Reset</button>\\r\\n\\r\\n                <button type=\\\"submit\\\" class=\\\"btn btn-primary float-right\\\"\\r\\n                        [ngClass]=\\\"{ 'disabled': !f.form.valid }\\\"\\r\\n                        [disabled]=\\\"!f.form.valid\\\">\\r\\n                  Submit\\r\\n                </button>\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </form>\\r\\n    </app-card>\\r\\n  </div>\\r\\n</div>\\r\\n\"","import { Directive, Input, forwardRef } from '@angular/core';\r\nimport { AsyncValidatorFn, AsyncValidator, NG_ASYNC_VALIDATORS, AbstractControl, ValidationErrors } from '@angular/forms';\r\nimport { Observable, pipe } from \"rxjs\";\r\nimport { debounceTime, map, switchMap } from 'rxjs/operators';\r\nimport { BaseResponse } from '../model/BaseResponseModel';\r\nimport { EmployeeMasterManageService } from '../../admin/employeeMaster/manage/employeeMasterManage.service';\r\nimport { ActivatedRoute } from '@angular/router';\r\n\r\nexport function ExistingCode(AssignRoleRegionsManageService: EmployeeMasterManageService, route: ActivatedRoute, companyID: number): AsyncValidatorFn {\r\n  return (control: AbstractControl): Promise<ValidationErrors | null> | Observable<ValidationErrors | null> => {\r\n    var empID = route.snapshot.params[\"empCode\"] ? route.snapshot.params[\"empCode\"] : 0;\r\n    let debounceTime = 1000;\r\n    return Observable.timer(debounceTime).pipe(switchMap(() => {\r\n\r\n      return AssignRoleRegionsManageService.CheckEmployeeCodeExist({\r\n        \"EmpCode\": control.value, \"Id\": empID, \"CompanyID\": companyID\r\n      }).pipe(map((data: BaseResponse) => {\r\n        return (data.Success) ? { \"empCodeExists\": true } : null;\r\n      }));\r\n\r\n    }));\r\n  };\r\n}\r\n@Directive({\r\n  selector: '[empCodeExists][ngModel]',\r\n  //selector: '[EmpCodeExists]',\r\n  providers: [{ provide: NG_ASYNC_VALIDATORS, useExisting: UniqueCodeValidatorDirective, multi: true }]\r\n})\r\n\r\nexport class UniqueCodeValidatorDirective implements AsyncValidator {\r\n  @Input('empCodeExists') model: any;\r\n  constructor(private _AssignRoleRegionsManageService: EmployeeMasterManageService, private route: ActivatedRoute) { }\r\n  validate(control: AbstractControl): Promise<ValidationErrors | null> | Observable<ValidationErrors | null> {\r\n    console.log(\"companyID\", this.model);\r\n    return ExistingCode(this._AssignRoleRegionsManageService, this.route, this.model)(control);\r\n\r\n  }\r\n}\r\n","﻿import { Directive, ElementRef, HostListener } from '@angular/core';\r\n\r\n@Directive({\r\n    selector: '[myNumberOnly]'\r\n})\r\nexport class NumberOnlyDirective {\r\n    // Allow decimal numbers and negative values\r\n    private regex: RegExp = new RegExp(/^-?[0-9]+(\\.[0-9]*){0,1}$/g);\r\n    // Allow key codes for special events. Reflect :\r\n    // Backspace, tab, end, home\r\n    private specialKeys: Array<string> = ['Backspace', 'Tab', 'End', 'Home', '-', 'Control'];\r\n\r\n    constructor(private el: ElementRef) {\r\n    }\r\n    @HostListener('keydown', ['$event'])\r\n    onKeyDown(event: KeyboardEvent) {\r\n        console.log(event.key);\r\n        // Allow Backspace, tab, end, and home keys\r\n        if (this.specialKeys.indexOf(event.key) !== -1) {\r\n            return;\r\n        }\r\n        if (event.ctrlKey && event.key === 'v') {\r\n            return;\r\n        }\r\n        else {\r\n            let current: string = this.el.nativeElement.value;\r\n            let next: string = current.concat(event.key);\r\n            if (next && !String(next).match(this.regex)) {\r\n                event.preventDefault();\r\n            }\r\n        }\r\n    }\r\n\r\n    @HostListener('paste', ['$event'])\r\n    onPaste(event: any) {\r\n        let content = event.clipboardData.getData('text/plain');\r\n        if (isNaN(content)) {\r\n            event.preventDefault();\r\n        }\r\n        console.log(content);\r\n        \r\n    }\r\n}"],"sourceRoot":""}
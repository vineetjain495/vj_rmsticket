{"version":3,"sources":["webpack:///./src/app/Employee/updateTicket/updateTicket.component.css","webpack:///./src/app/Employee/updateTicket/updateTicket.component.html","webpack:///./src/app/Employee/updateTicket/updateTicket.component.ts","webpack:///./src/app/Employee/updateTicket/updateTicket.module.ts","webpack:///./src/app/Employee/updateTicket/updateTicket.routing.ts"],"names":[],"mappings":"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","file":"src-app-Employee-updateTicket-updateTicket-module.js","sourcesContent":["module.exports = \"\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsImZpbGUiOiJzcmMvYXBwL0VtcGxveWVlL3VwZGF0ZVRpY2tldC91cGRhdGVUaWNrZXQuY29tcG9uZW50LmNzcyJ9 */\"","module.exports = \"<app-card [title]=\\\"'Update Ticket Assignment'\\\" [blockClass]=\\\"'tran-data'\\\" [showRightSection]=\\\"'false'\\\"\\r\\n          [showBack]=\\\"mainGridShow\\\"\\r\\n          [cardToggle]=\\\"cardToggleGrid\\\">\\r\\n  <div class=\\\"row\\\">\\r\\n    <div class=\\\"col-sm-12\\\">\\r\\n      <form [formGroup]=\\\"updateTicketForm\\\" (ngSubmit)=\\\"onFormSubmit()\\\">\\r\\n        <div class=\\\"row\\\">\\r\\n          <div class=\\\"col-lg-4\\\">\\r\\n            <label class=\\\"col-lg-12 col-form-label\\\">Replacing Employee Code</label>\\r\\n            <input type=\\\"text\\\" formControlName=\\\"Last_Type_EmpCode\\\" id=\\\"Last_Type_EmpCode\\\"\\r\\n                   class=\\\"form-control input-sm\\\" (blur)=\\\"getTicketCount2($event)\\\" placeholder=\\\"Code *\\\" required>\\r\\n          </div>\\r\\n          <div class=\\\"col-lg-4\\\">\\r\\n            <label class=\\\"col-lg-12 col-form-label\\\">Employee ID</label>\\r\\n            <ng-multiselect-dropdown name=\\\"ticketEmployee\\\"\\r\\n                                     [placeholder]=\\\"'Select Employee'\\\" [data]=\\\"Emp_details\\\" formControlName=\\\"Emp_ID\\\"\\r\\n                                     [settings]=\\\"dropdownSettings2\\\">\\r\\n            </ng-multiselect-dropdown>\\r\\n          </div>\\r\\n\\r\\n        </div>\\r\\n        <div class=\\\"row\\\" *ngIf=\\\"isTicketAvailable\\\">\\r\\n          <div class=\\\"col-lg-8\\\">\\r\\n            <div class=\\\"alert alert-success\\\">\\r\\n              Total <strong> {{ ticket_count }} </strong> available for this ID.\\r\\n            </div>\\r\\n            <input type=\\\"hidden\\\" formControlName=\\\"ticket_count\\\" id=\\\"Last_Type_EmpCode\\\"\\r\\n                   class=\\\"form-control input-sm\\\" placeholder=\\\"Code *\\\" value=\\\"{{ ticket_count }}\\\">\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\" *ngIf=\\\"isTicketEmpty\\\">\\r\\n          <div class=\\\"col-lg-8\\\">\\r\\n            <div class=\\\"alert alert-danger\\\">\\r\\n              Please enter Employee ID for whom you have to assign tickets.\\r\\n            </div>\\r\\n            <input type=\\\"hidden\\\" formControlName=\\\"ticket_count\\\" id=\\\"Last_Type_EmpCode\\\"\\r\\n                   class=\\\"form-control input-sm\\\" placeholder=\\\"Code *\\\" value=\\\"{{ ticket_count }}\\\">\\r\\n          </div>\\r\\n        </div>\\r\\n        <div class=\\\"row\\\">\\r\\n          <div class=\\\"col-sm-12\\\">\\r\\n            <div class=\\\"row\\\">\\r\\n              <div class=\\\"col-sm-12 text-center\\\">\\r\\n\\r\\n                <input type=\\\"submit\\\" value=\\\"Update Ticket\\\" [disabled]=\\\"!updateTicketForm.valid\\\"\\r\\n                       class=\\\"btn btn-info\\\">\\r\\n              </div>\\r\\n            </div>\\r\\n          </div>\\r\\n        </div>\\r\\n      </form>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n \\r\\n</app-card>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { EmployeeService } from '../Employee.service';\r\nimport { Router } from '@angular/router';\r\nimport { FormBuilder, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Params } from '@angular/router';\r\nimport { DataService } from 'src/app/services/DataService';\r\n@Component({\r\n  selector: 'app-update-ticket',\r\n  templateUrl: './updateTicket.component.html',\r\n  styleUrls: ['./updateTicket.component.css']\r\n})\r\nexport class UpdateTicketComponent implements OnInit {\r\n  updateTicketForm: any;\r\n  Emp_details: Array<any> = [];\r\n  dropdownSettings: any = {};\r\n  dropdownSettings2: any = {};\r\n  last_emp_id_val: string;\r\n  ticket_count: string;\r\n  isTicketAvailable: boolean;\r\n  isTicketEmpty: boolean;\r\n  constructor(private employeeService: EmployeeService,\r\n    private formbulider: FormBuilder,\r\n    private ds: DataService,\r\n   private route: ActivatedRoute,\r\n    private router: Router,\r\n  ) {\r\n   // this.ticket_count = 0;\r\n    this.ds.ShowHideToasty({\r\n      title: 'Please Wait...',\r\n      msg: '',\r\n      showClose: false,\r\n      theme: 'bootstrap',\r\n      type: 'wait',\r\n      closeOther: true\r\n    });\r\n    console.log(this.employeeService.edit_empCode);\r\n    if (this.route.snapshot.params.id) {\r\n      this.last_emp_id_val = this.route.snapshot.params.id;\r\n      console.log(this.last_emp_id_val);\r\n      this.getTicketCount(this.last_emp_id_val);\r\n     \r\n    }\r\n    else {\r\n      this.last_emp_id_val = '';\r\n    }\r\n    console.log(this.ticket_count);\r\n    this.updateTicketForm = this.formbulider.group({\r\n      Emp_ID: ['', [Validators.required]],\r\n      Last_Type_EmpCode: [this.last_emp_id_val, [Validators.required]],\r\n      ticket_count:[this.ticket_count]\r\n    });\r\n    \r\n    this.employeeService.getEmployeeDetails().subscribe((res: any) => {\r\n      res.Entity.forEach((element) => {\r\n        //console.log(res);\r\n        if (element) {\r\n\r\n          this.Emp_details.push(element.Type_EmpCode + \" - ( \" + element.EmployeeName + \" )\");\r\n          //console.log(this.Emp_details);\r\n        }\r\n\r\n      });\r\n      this.Emp_details = this.Emp_details.filter((el, i, a) => i === a.indexOf(el));\r\n    });\r\n    this.ds.ShowHideToasty({\r\n      title: 'Update Ticket Here',\r\n      msg: '',\r\n      showClose: true,\r\n      theme: 'bootstrap',\r\n      type: 'success',\r\n      closeOther: true,\r\n      timeout: 5000\r\n    });\r\n    \r\n  }\r\n\r\n  ngOnInit() {\r\n    \r\n    this.dropdownSettings2 = {\r\n      singleSelection: false,\r\n      // idField: 'item_id',\r\n      // textField: 'item_text',\r\n      enableCheckAll: false,\r\n      selectAllText: 'Select All',\r\n      unSelectAllText: 'UnSelect All',\r\n      limitSelection: 0,\r\n      itemsShowLimit: 3,\r\n      allowSearchFilter: true\r\n    };\r\n   \r\n  }\r\n  onFormSubmit() {\r\n    //console.log(\"hello\");\r\n\r\n    const employeeID = this.updateTicketForm.value;\r\n    console.log(employeeID);\r\n    this.UpdateTicketAssign(employeeID);\r\n\r\n    //this.updateTicketForm.reset();\r\n  }\r\n  UpdateTicketAssign(employee) {\r\n  \r\n    this.ds.ShowHideToasty({\r\n      title: 'Please Wait...',\r\n      msg: '',\r\n      showClose: false,   \r\n      theme: 'bootstrap',\r\n      type: 'wait',\r\n      closeOther: true\r\n    });\r\n   \r\n    this.employeeService.UpdateTicketAssign(employee).subscribe((response: any) => {\r\n      if (response.Success) {\r\n        this.ds.ShowHideToasty({\r\n          title: 'Record Updated Successfully',\r\n          msg: '',\r\n          showClose: true,\r\n          theme: 'bootstrap',\r\n          type: 'success',\r\n          closeOther: true,\r\n          timeout: 5000\r\n        });\r\n        this.updateTicketForm.reset();\r\n      }\r\n      else {\r\n        this.ds.ShowHideToasty({\r\n          title: 'Failed to Create Ticket and Upload file',\r\n          msg: response.Message,\r\n          showClose: true,\r\n          theme: 'bootstrap',\r\n          type: 'error',\r\n          closeOther: true,\r\n        });\r\n      }\r\n      \r\n\r\n    });\r\n\r\n  }\r\n  getTicketCount2(event) {\r\n    var employeeID = event.target.value;\r\n    if (employeeID != \"\") {\r\n      console.log(employeeID);\r\n      this.employeeService.getEmployeeTicketsByID(employeeID).subscribe((res: any) => {\r\n        this.ticket_count = res.Entity;\r\n        console.log(this.ticket_count);\r\n        this.isTicketAvailable = true;\r\n        this.isTicketEmpty = false;\r\n        this.updateTicketForm.controls['ticket_count'].setValue(this.ticket_count);\r\n        this.dropdownSettings2 = {\r\n          singleSelection: false,\r\n          // idField: 'item_id',\r\n          // textField: 'item_text',\r\n          enableCheckAll: false,\r\n          selectAllText: 'Select All',\r\n          unSelectAllText: 'UnSelect All',\r\n          limitSelection: this.ticket_count,\r\n          itemsShowLimit: 3,\r\n          allowSearchFilter: true\r\n        };\r\n      });\r\n    } else {\r\n      this.isTicketEmpty = true;\r\n    }\r\n  }\r\n  getTicketCount(employeeID) {\r\n    console.log(employeeID);\r\n    this.employeeService.getEmployeeTicketsByID(employeeID).subscribe((res: any) => {\r\n      this.ticket_count = res.Entity;\r\n      console.log(this.ticket_count);\r\n      this.isTicketAvailable = true;\r\n      this.isTicketEmpty = false;\r\n\r\n      this.updateTicketForm.controls['ticket_count'].setValue(this.ticket_count);\r\n      this.dropdownSettings2 = {\r\n        singleSelection: false,\r\n        // idField: 'item_id',\r\n        // textField: 'item_text',\r\n        enableCheckAll: false,\r\n        selectAllText: 'Select All',\r\n        unSelectAllText: 'UnSelect All',\r\n        limitSelection: this.ticket_count,\r\n        itemsShowLimit: 3,\r\n        allowSearchFilter : true\r\n      };\r\n    });\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\r\nimport { CommonModule } from '@angular/common';\r\nimport { SharedModule } from 'src/app/shared/shared.module';\r\n//import { HttpClientModule } from '@angular/common/http';\r\n//import { HttpModule } from '@angular/http';\r\nimport { UpdateTicketComponent } from './updateTicket.component';\r\nimport { routing } from './updateTicket.routing';\r\nimport { EmployeeService } from '../Employee.service';\r\nimport { NgMultiSelectDropDownModule } from 'ng-multiselect-dropdown';\r\n\r\n\r\n@NgModule({\r\n  imports: [\r\n    routing,   \r\n    SharedModule,\r\n    CommonModule,\r\n    FormsModule,\r\n    ReactiveFormsModule,\r\n    NgMultiSelectDropDownModule,\r\n    //ToastyModule.forRoot()\r\n  ],\r\n  entryComponents: [\r\n  ],\r\n  declarations: [\r\n    UpdateTicketComponent],\r\n  providers: [EmployeeService],\r\n})\r\nexport class UpdateTicketModule { }\r\n","import { ModuleWithProviders } from '@angular/core';\r\nimport { Routes, RouterModule } from '@angular/router';\r\n\r\nimport { UpdateTicketComponent } from './updateTicket.component';\r\n//import { AuthGuard } from '../shared/Security/auth.guard';\r\n\r\nconst routes: Routes = [\r\n    {\r\n        path: '',\r\n        component: UpdateTicketComponent,\r\n        data: {\r\n          breadcrumb: 'UpdateTicket',\r\n            icon: 'icofont-dashboard bg-c-blue',\r\n            status: false\r\n    },\r\n    \r\n    }\r\n\r\n];\r\n\r\nexport const routing: ModuleWithProviders = RouterModule.forChild(routes);  \r\nexport class UpdateTicketRoutingModule { }\r\n"],"sourceRoot":""}